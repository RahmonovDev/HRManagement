package uz.pdp.hrmanagement.service;

import net.bytebuddy.utility.RandomString;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import uz.pdp.hrmanagement.entity.Address;
import uz.pdp.hrmanagement.entity.User;
import uz.pdp.hrmanagement.payload.ApiResponse;
import uz.pdp.hrmanagement.payload.LoginDTO;
import uz.pdp.hrmanagement.payload.UserDTO;
import uz.pdp.hrmanagement.repository.UserRepository;
import uz.pdp.hrmanagement.security.JwtProvider;

import javax.transaction.Transactional;

@Service
@Transactional
public class AuthService implements UserDetailsService {

    @Autowired
    public UserRepository userRepository;

    @Autowired
    public void setJavaMailSender(JavaMailSender javaMailSender) {
        this.javaMailSender = javaMailSender;
    }

    public JavaMailSender javaMailSender;

    @Autowired
    public AuthenticationManager authenticationManager;

    @Autowired
    public JwtProvider jwtProvider;

    @Autowired
    public PasswordEncoder passwordEncoder;


    public ApiResponse registerUser(UserDTO userDTO){

        if (userRepository.existsByEmail(userDTO.getEmail()))
            return new ApiResponse("Such email already exist",false);

        Address address = new Address();

        address.setCity(userDTO.getCity());
        address.setDistrict(userDTO.getDistrict());
        address.setRegion(userDTO.getRegion());

        User user = new User();

        user.setFirstName(userDTO.getFirstName());
        user.setLastName(userDTO.getLastName());
        user.setEmail(userDTO.getEmail());
        user.setAddress(address);
        user.setSalary(userDTO.getSalary());

        String randomPassword = RandomString.make();
        user.setPassword(passwordEncoder.encode(randomPassword));
        userRepository.save(user);
        try {
            sendEmail(user,randomPassword);
        }catch (Exception e){
            return new ApiResponse("Error on sending email",false);
        }

        return new ApiResponse("Success",true);
    }

    public ApiResponse login(LoginDTO loginDTO){
        try {
            Authentication authenticate = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(
                    loginDTO.getEmail(),
                    loginDTO.getPassword()
            ));

            User user = (User)authenticate.getPrincipal();
            String token = jwtProvider.generateToken(user.getEmail(), user.getRoles());

            return new ApiResponse(token,true);
        }catch (BadCredentialsException e){
            return new ApiResponse("Parol yoki login xato",false);
        }
    }


    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        return userRepository.findByEmail(username).orElseThrow(()-> new UsernameNotFoundException(username + " not found"));
    }

    public boolean sendEmail(User user,String password){
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom("test@gmail.com");
        message.setTo(user.getEmail());
        message.setSubject("Xabar headeri");
        message.setText(
                "Your profile information:\n" +
                "Name: " + user.getFirstName()+" "+user.getLastName()+"\n"+
                "email: " + user.getEmail() + "\n"+
                "password: " + password +"\n\n" +
                "This password has  generated by the system. You can change it in your profile. At first you need to sign in" +
                        "Then you can change your password via this link: http://localhost:8080/api/auth/editPassword");
        javaMailSender.send(message);
        return true;
    }

}
